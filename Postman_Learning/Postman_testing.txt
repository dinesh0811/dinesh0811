URL to test: https://thinking-tester-contact-list.herokuapp.com

Adding New User
mail id: test.postman@test.com
passowrd: 1234567

My url : https://thinking-tester-contact-list.herokuapp.com/contactList

JWT-JSON Web Request

We can get this token by login in using POST method with proper url
User login token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzU0Njg0ZDFiYWZkYTAwMTMwZTBmMWUiLCJpYXQiOjE3MzM1ODU4Mzl9.Pib6fdrXTPgbTTIf7CUTSFSMnYNdTCkYh4kuH7GUQvA

Note: 
1. We can also get 404 Error while generating PUT and DELETE request. 
2. We can also generate a missing required field responseby doing a PUT request to update an existing contacts.
3. We can user PUT request to updated an existing contact.

1. 200-OK (GET) - (Request successful. The server has responded as required.)
2. 201-Created (POST) - (A new resource was created successfully.)
3. 200-OK (PUT) - (Request successful. The server has responded as required.)
4. 200-OK(DELETE) - (Request successful. The server has responded as required.)
5. If we try to see deleted contact we will get a 404 found error.
	404-Not Found (GET) - (Requested resource could not be found)

Entering into Security Test:
1. A request is send with a missing authentication token 
Remove the token and send a GET request
	GET - 401 (Unauthorized) - (The request is unauthenticated.)
2. A record is not found.
Enter some invalid ID and send a GET request
	GET - 404 (Not Found) - (Requested resource could not be found.)
3. A request is sent with missing required information.
Remove the first name and send the POST request.
	POST - 400 (Bad Request) - (The server could not understand the request. Maybe a bad syntax?)
4. A value is sent with too many characters.
Add 21 character in last name which only allow 20 characters and send POST request.
	POST - 400 (Bad Request) - (The server could not understand the request. Maybe a bad syntax?)
5. A value is send that is not in the correct formate.
Update a Email to be invalid.
	PUT - 400 (Bad Request) - (The server could not understand the request. Maybe a bad syntax?)

Setting up an Environment Variable:
1. set value for firstname and lastname and update the post request firstname and lastname values with {{firstname}} and {{lastname}} and click send.

2. 
Step -1 - Update a variable using JS.
Click on Add_Contact, then click 'Scripts', click on 'Set an enviroement variable' and update existing value : pm.environment.set("variable_key", "variable_value");)
updated value:
var jsondata = pm.response.json();
pm.environment.set("contactiD", jsondata._id);
Then click save and click send to run the test.
Result: A new user is created in the portal with different contact_id

Step -2 - Do the same for Login
var jsondata = pm.response.json();
pm.environment.set("token", jsondata.token);
Result: Login token has updated as {{contactiD}}
Here we taking the token for the registered user.

Use {{contactiD}} variable insted the contactid.
To run Get_Single_Contact and Update_Contact

Use {{token}} variable insted the tokenid.
To run Get_Contact_List.

3. We can also update each key/value pair for the users.

Status type Assertions:
It's validated that the status code we receive as a response to a request is the one we are expecting.

1. Select Get_Contact_List and click on 'Scripts', to verify the status code assertion select 'Status code: Code is 200' option
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
click 'Send' button
Result: Test Result passed and we got 200 OK response

2. To test negative request
Follow the same steps'Get_Contact_List-Unauthorized' and click 'Send'
i. 
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
Result: Test Failed - Status code is 200 | AssertionError: expected response to have status code 200 but got 404

ii. 
pm.test("Status code is 404", function () {
    pm.response.to.have.status(404);
});
Result: Test passed - Status code is 404

Body type Assertions:
A body assertions verifies that the body of the response contains the text we are were expecting

1. Select 'Get_Single_Contact', click 'Scripts' and select 'Response Body: Contains string' 
i. 
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("fackuser3@gmail.com");
});
Result: Test Passed - Body matches string

ii.
pm.test("Missing Firstname Error message is returned", function () {
    pm.expect(pm.response.text()).to.include("`firstName` is required");
});
Result: Test Passed - Missing Firstname Error message is returned

"Response body: Contains string": The text is in the body of the responmse, but may not be the entire response

Note: If we want entire response select "Response body: is equal to a string": The text matches the entire body of the response

Header and Response time assertions: (Security and Performance testing)
Header:
	Response Headers: Information passed with an API response that include additional information about the response, such as the format fof the response or any security controls
i. Select 'Response Headers: Content-Type header check' and click 'Send'
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Content-Type is application/json", function () {
    pm.response.to.have.header("Content-type", "application/json; charset=utf-8");
});
Result: Test passed (2/2) - Status code is 200, Content-Type is application/json

Response time:
The time is takes for a request to reach the server and return a response.
Click on the 3 dots of 'Contact List' Collections and navigate to 'scripts' 
Note: It'll will add for all available methods in the collections.
pm.test("Response time is less than 3000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(3000);
});
i. Select 'Add_Contact' and click send.
Result: Test passed - Response time is less than 3000ms

ii. Select 'Add_Contact-Missing_Required_Field' and click send
Result: Test passed - Response time is less than 3000ms,  Missing Firstname Error message is returned

Note: we can add all type of assertions to collection level and also folder level.

Debug:
Debug your tes when your test is failing.
1. Check that your HTTP verb is correct
2. Check that the authentication token is sent
3. Check that the URL of the request is correct
4. Check that the all variables are populated correctly in the request
Note: Click on 'Console' button to address the issue.


JSON assertions:
Body vs JSON assertions:
--Body assertions is just looking for the value somewhere in the body.
--JSON assertions is looking for a specific field value and validating that, what's you're expecting.

Add new Snippets "Response Body:JSON value check"
with help of above Snippet we can find the value

1. To find firstname and lastname values using ablove snippet.
var jsonData = pm.response.json();
pm.test("Correct first name is returned", function () {
    pm.expect(jsonData.firstname).to.eql(environment.firstname);
});
pm.test("Correct last name is returned", function () {
    pm.expect(jsonData.lastname).to.eql(environment.lastname);
});

Result: Test is passed because we received exact first and last names

Nested JSON assertion:

Example for nested value is address:
"address": {
        "street": "123 Main St.", "city": "Belmont", "state": "MA", "postalCode": "01734"
    }

1. Here I added a file from Github using " https://github.com/LinkedInLearning/postman-essential-training-4362153/blob/main/Address.postman_collection.txt "
then added into my folder as a JSON format file.
Now I added the same snippet
var jsonData = pm.response.json();
pm.test("Correct city is returned", function () {
    pm.expect(jsonData.address.city).to.eql("Belmont");
});
pm.test("Correct city is returned", function () {
    pm.expect(jsonData.address.postalCode).to.eql("01734");
});
Result: Test is passed because we received exact city name
Note: Remember whenever we using nested json we need to give the value from out side level in. eg:To get city name use "address.city" and for postalCode use "address.postalCode"

2. Now I have added one more file to validate more complicated nested value "D:\Postman_Learnings\postman-essential-training-4362153PetOwners.postman_collection.json"
pm.test("Amy's 2nd cat is a Siamese", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.pets.cats[1].breed).to.eql("Siamese");
});

Result: Test passed

3. Again tested one complicated suit.
pm.test("Carol's 2nd dog name is Fred", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.owners[2].pets.dogs[1].name).to.eql("Fred");
});

Result: Test passed

4. Task: Add an assertion to to get the per owners request that will assert the Bob's first cat is two years old

var jsonData = pm.response.json();
pm.test("Carol's 2nd dog name is Fred", function () {
    pm.expect(jsonData.owners[2].pets.dogs[1].name).to.eql("Fred");
});
pm.test("Bob's first cat is two years old", function () {
    pm.expect(jsonData.owners[1].pets.cats[0].age).to.eql(2);
});

Result: Test passed


The Postman Collections Runner:
Collections Runner: A future of postman that will send a each request for your collection automatically

1. We can run the collection using run 
2. Export all data from Contact_list and it's environment file.




location: https://github.com/LinkedInLearning/postman-essential-training-4362153/tree/main
